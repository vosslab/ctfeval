#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.6.8 on Thu May  8 09:51:21 2014
#

import os
import wx
import numpy
from PIL import Image
from pyami import mrc
from pyami import imagefun
from pyami.Entry import FloatEntry
from appionlib.apCtf import ctfdisplay

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

imagetypefilter = (
	"MRC Files (*.mrc)|*.mrc"
	+"|"+
	"PNG Files (*.png)|*.png" 
	+"|"+
	"Spider Files (*.spi)|*.spi" 
	+"|"+
	"TIFF Files (*.tif)|*.tif"
	+"|"+
	"JPEG Files (*.jpg)|*.jpg"
	)


class PopUpDialog(wx.Frame):
	def __init__(self, imagefile, *args, **kwds):
		wx.Frame.__init__(self, None, title="Popup Frame", size=(600,600))
		# begin wxGlade: PopupDialog.__init__
		kwds["style"] = wx.TAB_TRAVERSAL
		panel = wx.Panel(self, *args, **kwds)

		#bitmap = wx.Bitmap(imagefile, wx.BITMAP_TYPE_ANY)
		image = wx.Image(imagefile, wx.BITMAP_TYPE_ANY)
		xscale = 800./image.GetWidth()
		yscale = 800./image.GetHeight()
		scale = max(xscale,yscale)
		width = int(round(image.GetWidth()*scale))
		height = int(round(image.GetHeight()*scale))
		bitmap = wx.BitmapFromImage(image.Scale(width, height))
		self.Image = wx.StaticBitmap(self, wx.ID_ANY, bitmap)

		self.__set_properties()
		self.__do_layout()
		# end wxGlade

	def __set_properties(self):
		# begin wxGlade: PopupDialog.__set_properties
		pass
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: PopupDialog.__do_layout
		PopUpSize = wx.FlexGridSizer(wx.HORIZONTAL)
		PopUpSize.Add(self.Image, 0, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
		PopUpSize.AddGrowableRow(0)
		PopUpSize.AddGrowableCol(0)
		self.SetSizer(PopUpSize)
		PopUpSize.Fit(self)
		# end wxGlade

# end of class PopupDialog

class MyFrame(wx.Frame):
	#--------------------
	def __init__(self, *args, **kwds):
		# begin wxGlade: MyFrame.__init__
		self.fullimagepath = None
		kwds["style"] = wx.DEFAULT_FRAME_STYLE
		wx.Frame.__init__(self, *args, **kwds)
		self.panel = wx.Panel(self, wx.ID_ANY)
		
		logofile = "images/ctfeval_logo.png"
		if not os.path.isfile(logofile):
			logofile = "ctfeval_logo.png"
		self.Logo = wx.StaticBitmap(self.panel, wx.ID_ANY, wx.Bitmap(logofile, wx.BITMAP_TYPE_ANY))
		self.static_line_1a = wx.StaticLine(self.panel, wx.ID_ANY)
		self.static_line_1b = wx.StaticLine(self.panel, wx.ID_ANY)
		self.openFileButton = wx.Button(self.panel, wx.ID_ANY, "Select Micrograph...")
		self.imageLabel = wx.StaticText(self.panel, wx.ID_ANY, "<- click button to select micrograph")
		self.static_line_2a = wx.StaticLine(self.panel, wx.ID_ANY)
		self.static_line_2b = wx.StaticLine(self.panel, wx.ID_ANY)
		self.voltLabel = wx.StaticText(self.panel, wx.ID_ANY, "Voltage Potential (kV)")
		self.voltValue = FloatEntry(self.panel, wx.ID_ANY, allownone=True, chars=8, value="", style=wx.TE_RIGHT)
		self.csLabel = wx.StaticText(self.panel, wx.ID_ANY, "Spherical Abberation, Cs (mm)")
		self.csValue = FloatEntry(self.panel, wx.ID_ANY, allownone=True, chars=8, value="", style=wx.TE_RIGHT)
		self.pixelSizeLabel = wx.StaticText(self.panel, wx.ID_ANY, "Pixel size (Angstroms, A)")
		self.pixelSizeValue = FloatEntry(self.panel, wx.ID_ANY, allownone=True, chars=8, value="", style=wx.TE_RIGHT)
		self.static_line_3a = wx.StaticLine(self.panel, wx.ID_ANY)
		self.static_line_3b = wx.StaticLine(self.panel, wx.ID_ANY)
		self.defoc1Label = wx.StaticText(self.panel, wx.ID_ANY, "Defocus 1 (microns, um)")
		self.defoc1Value = FloatEntry(self.panel, wx.ID_ANY, allownone=True, chars=8, value="", style=wx.TE_RIGHT)
		self.defoc2Label = wx.StaticText(self.panel, wx.ID_ANY, "Defocus 2 (microns, um)")
		self.defoc2Value = FloatEntry(self.panel, wx.ID_ANY, allownone=True, chars=8, value="", style=wx.TE_RIGHT)
		self.angleLabel = wx.StaticText(self.panel, wx.ID_ANY, "Angle Astimatism (degrees)")
		self.angleValue = FloatEntry(self.panel, wx.ID_ANY, allownone=True, chars=8, value="", style=wx.TE_RIGHT)
		self.ampConLabel = wx.StaticText(self.panel, wx.ID_ANY, "Amplitude Contrast (0..1)")
		self.ampConValue = FloatEntry(self.panel, wx.ID_ANY, allownone=True, chars=8, value="", style=wx.TE_RIGHT)
		self.processButton = wx.Button(self.panel, wx.ID_ANY, "Process CTF...")
		self.quitButton = wx.Button(self.panel, wx.ID_EXIT, "Quit")
		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_BUTTON, self.selectMicrograph, self.openFileButton)
		self.Bind(wx.EVT_BUTTON, self.processCTF, self.processButton)
		self.Bind(wx.EVT_BUTTON, self.quit, self.quitButton)
		# end wxGlade

	#--------------------
	def __set_properties(self):
		# begin wxGlade: MyFrame.__set_properties
		self.SetTitle("MyFrame")
		self.processButton.SetFont(wx.Font(16, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Cantarell"))
		# end wxGlade

	#--------------------
	def __do_layout(self):
		# begin wxGlade: MyFrame.__do_layout

		FrameSizer = wx.BoxSizer(wx.VERTICAL) # = sizer_1
		MainSizer = wx.FlexGridSizer(2, 3, 10, 10) # = grid_sizer_1

		self.Layout()

		Input = wx.FlexGridSizer(11, 2, 5, 15)
		MainSizer.Add(self.Logo, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.static_line_1a, 0, wx.EXPAND, 0)
		Input.Add(self.static_line_1b, 0, wx.EXPAND, 0)
		Input.Add(self.openFileButton, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.imageLabel, 0, wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.static_line_2a, 0, wx.EXPAND, 0)
		Input.Add(self.static_line_2b, 0, wx.EXPAND, 0)
		Input.Add(self.voltLabel, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.voltValue, 0, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.csLabel, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.csValue, 0, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.pixelSizeLabel, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.pixelSizeValue, 0, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.static_line_3a, 0, wx.EXPAND, 0)
		Input.Add(self.static_line_3b, 0, wx.EXPAND, 0)
		Input.Add(self.defoc1Label, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.defoc1Value, 0, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.defoc2Label, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.defoc2Value, 0, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.angleLabel, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.angleValue, 0, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.ampConLabel, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.ampConValue, 0, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.AddGrowableRow(0)
		Input.AddGrowableRow(2)
		Input.AddGrowableRow(6)
		Input.AddGrowableCol(1)
		MainSizer.Add(Input, 1, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
		MainSizer.Add((10, 10), 0, wx.EXPAND | wx.ADJUST_MINSIZE, 0)
		MainSizer.Add(self.quitButton, 0, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 2)
		MainSizer.Add(self.processButton, 0, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 2)
		MainSizer.Add((10, 10), 0, wx.EXPAND | wx.ADJUST_MINSIZE, 0)

		self.statbar = self.CreateStatusBar()
		self.statbar.PushStatusText("Ready: "+os.getcwd(), 0)

		self.panel.SetSizer(MainSizer)
		FrameSizer.Add(self.panel, 1, wx.EXPAND, 0)
		MainSizer.Fit(self)
		MainSizer.AddGrowableRow(0)
		MainSizer.AddGrowableRow(1)
		MainSizer.AddGrowableCol(1)
		self.SetSizer(FrameSizer)
		FrameSizer.Fit(self)
		self.Layout()
		# end wxGlade

	#--------------------
	def selectMicrograph(self, event):  # wxGlade: MyFrame.<event_handler>
		dlg = wx.FileDialog(self, "Choose a micrograph to open", os.getcwd(), "",
			imagetypefilter, wx.OPEN)
		self.data = {}
		if dlg.ShowModal() == wx.ID_OK:
			self.data['outfile'] = dlg.GetFilename()
			self.data['dirname']  = os.path.abspath(dlg.GetDirectory())
			os.chdir(self.data['dirname'])
			self.fullimagepath = os.path.join(self.data['dirname'], self.data['outfile'])
			if (dlg.GetFilterIndex() == 0):
				self.processMrc(self.fullimagepath)
				self.imageLabel.SetLabel(dlg.GetFilename())
				self.statbar.PushStatusText(self.fullimagepath, 0)
			
			self.processButton.SetBackgroundColour(wx.Colour(255, 198, 191))
		dlg.Destroy()
		event.Skip()

	#--------------------
	def processMrc(self, mrcfile):  # wxGlade: MyFrame.<event_handler>
		if not os.path.isfile(mrcfile):
			print "ERROR: could not read file %s"%(mrcfile)
			self.statbar.PushStatusText("ERROR: could not read file %s"%(mrcfile), 0)
		header = mrc.read_file_header(mrcfile)
		pixelsize = header['xlen']/float(header['nx'])
		#print "'%s', %.3f"%(self.pixelSizeValue.GetValue(), pixelsize)
		if self.pixelSizeValue.GetValue() is None:
			self.pixelSizeValue.SetValue(pixelsize)
		#mrc.printHeader(header)
		array = mrc.read(mrcfile)
		self.setBitmap(array)

	#--------------------
	def setBitmap(self, array):
		'''
		Set the internal wx.Bitmap to current Numeric image
		'''
		if isinstance(array, numpy.ndarray):
			wximage = self.numpyToWxImage(array)
		else:
			self.bitmap = None
			return False
		if wximage is None:
			return False
		xscale = 384./wximage.GetWidth()
		yscale = 384./wximage.GetHeight()
		scale = max(xscale,yscale)
		width = int(round(wximage.GetWidth()*scale))
		height = int(round(wximage.GetHeight()*scale))
		bitmap = wx.BitmapFromImage(wximage.Scale(width, height))
		self.Logo.SetBitmap(bitmap)
		return True

	#--------------------
	def numpyToWxImage(self, array):
		numStdev = 3.0
		clip = (array.mean()-numStdev*array.std(), array.mean()+numStdev*array.std())
		wximage = wx.EmptyImage(array.shape[1], array.shape[0])
		normarray = array.astype(numpy.float32)
		normarray = normarray.clip(min=clip[0], max=clip[1])
		if clip[1] - clip[0] != 0:
			normarray = (normarray - clip[0]) / (clip[1] - clip[0]) * 255.0
		normarray = normarray.astype(numpy.uint8)
		h, w = normarray.shape[:2]
		imagedata = Image.fromstring("L", (w, h), normarray.tostring())
		wximage.SetData(imagedata.convert('RGB').tostring())
		return wximage

	#--------------------
	def processCTF(self, event):  # wxGlade: MyFrame.<event_handler>
		if self.checkCTFvalues() is False:
			event.Skip()
			return
		imgdata = {
			'filename': self.fullimagepath,
			'image': mrc.read(self.fullimagepath),
		}
		ctfdata = {
			'volts': self.voltValue.GetValue()*1e3,
			'cs': self.csValue.GetValue(),
			'apix': self.pixelSizeValue.GetValue(),
			'defocus1': self.defoc1Value.GetValue()*1e-6,
			'defocus2': self.defoc2Value.GetValue()*1e-6,
			'angle_astigmatism': self.angleValue.GetValue(),
			'amplitude_contrast': self.ampConValue.GetValue(),
		}
		a = ctfdisplay.CtfDisplay()
		ctfdisplaydict = a.CTFpowerspec(imgdata, ctfdata, None, None, True)

		self.showImages(ctfdisplaydict)

		event.Skip()
		#return ctfdisplaydict

	#--------------------
	def showImages(self, ctfdisplaydict):
		print ctfdisplaydict
		a = PopUpDialog(ctfdisplaydict['powerspecfile'])
		a.Show()
		b = PopUpDialog(ctfdisplaydict['plotsfile'])
		b.Show()

	#--------------------
	def popupError(self, msg):
		self.statbar.PushStatusText("ERROR: %s"%(msg), 0)
		dialog = wx.MessageDialog(self, "%s"%(msg),
			'Error', wx.OK|wx.ICON_ERROR)
		dialog.ShowModal()
		dialog.Destroy()

	#--------------------
	def checkCTFvalues(self):
		if self.fullimagepath is None:
			self.popupError("Please select a micrograph for processing")
			return False	
	
		volts = self.voltValue.GetValue()
		if volts is None:
			self.popupError("Please enter a voltage value")
			return False
		if volts > 400.0 or volts < 60:
			self.popupError("atypical high tension value %.1f kiloVolts"%(volts))	
			return False
		
		cs = self.csValue.GetValue()
		if cs is None:
			self.popupError("Please enter a spherical abberation value")
			return False
		if cs > 7.0 or cs < 0.4:
			self.popupError("atypical C_s value %.1f mm"%(cs))
			return False

		pixelsize = self.pixelSizeValue.GetValue()
		if pixelsize is None:
			self.popupError("Please enter a pixel size value")
			return False		
		if pixelsize > 20.0 or pixelsize < 0.1:
			self.popupError("atypical pixel size value %.1f Angstroms"%(pixelsize))
			return False
		
		focus1 = self.defoc1Value.GetValue()
		if focus1 is None:
			self.popupError("Please enter a defocus 1 value")
			return False
		if focus1 > 15.0 or focus1 < 0.1:
			self.popupError("atypical defocus #1 value %.1f microns (underfocus is positve)"%(focus1))
			return False
			
		focus2 = self.defoc2Value.GetValue()
		if focus2 is None:
			self.popupError("Please enter a defocus 2 value")
			return False
		if focus2 > 15.0 or focus2 < 0.1:
			self.popupError("atypical defocus #2 value %.1f microns (underfocus is positve)"%(focus1))
			return False			

		angle = self.angleValue.GetValue()
		if angle is None:
			self.popupError("Please enter a angle astigmatism value, zero for no astig")
			return False
		if abs(angle) > 0.01 and abs(angle) < 3.0:
			self.popupError("atypical angle astigmatism value %.3f"%(angle))
			return False
			
		ampcon = self.ampConValue.GetValue()
		if ampcon is None:
			self.popupError("Please enter a amplitude contrast value")
			return False
		if ampcon < 0.0 or ampcon > 0.5:
			self.popupError("atypical amplitude contrast value %.3f"%(ampcon))
			return False

		return True

	#--------------------
	def quit(self, event):  # wxGlade: MyFrame.<event_handler>
		wx.Exit()
		event.Skip()

# end of class MyFrame
if __name__ == "__main__":
	app = wx.PySimpleApp(0)
	wx.InitAllImageHandlers()
	MyFrame = MyFrame(None, wx.ID_ANY, "")
	app.SetTopWindow(MyFrame)
	MyFrame.Show()
	app.MainLoop()
