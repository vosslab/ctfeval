#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.6.8 on Thu May  8 09:51:21 2014
#

import wx
import os
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

imagetypefilter = (
	"PNG Files (*.png)|*.png" 
	+"|"
	+ "MRC Files (*.mrc)|*.mrc"
	+"|"
	+ "Spider Files (*.spi)|*.spi" 
	+"|"
	+ "TIFF Files (*.tif)|*.tif"
	+"|"
	+ "JPEG Files (*.jpg)|*.jpg"
	)

class MyFrame(wx.Frame):
	def __init__(self, *args, **kwds):
		# begin wxGlade: MyFrame.__init__
		kwds["style"] = wx.DEFAULT_FRAME_STYLE
		wx.Frame.__init__(self, *args, **kwds)
		self.Logo = wx.StaticBitmap(self, wx.ID_ANY, wx.Bitmap("/extra/Movies/ctfeval/ctfeval_logo.png", wx.BITMAP_TYPE_ANY))
		self.static_line_1a = wx.StaticLine(self, wx.ID_ANY)
		self.static_line_1b = wx.StaticLine(self, wx.ID_ANY)
		self.openFileButton = wx.Button(self, wx.ID_ANY, "Select Micrograph...")
		self.imageLabel = wx.StaticText(self, wx.ID_ANY, "<- click button to select micrograph")
		self.static_line_2a = wx.StaticLine(self, wx.ID_ANY)
		self.static_line_2b = wx.StaticLine(self, wx.ID_ANY)
		self.voltLabel = wx.StaticText(self, wx.ID_ANY, "Voltage Potential (kV)")
		self.voltValue = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_RIGHT)
		self.csLabel = wx.StaticText(self, wx.ID_ANY, "Spherical Abberation, Cs (mm)")
		self.csValue = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_RIGHT)
		self.pixelSizeLabel = wx.StaticText(self, wx.ID_ANY, "Pixel size (Angstroms, A)")
		self.pixelSizeValue = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_RIGHT)
		self.static_line_3a = wx.StaticLine(self, wx.ID_ANY)
		self.static_line_3b = wx.StaticLine(self, wx.ID_ANY)
		self.defoc1Label = wx.StaticText(self, wx.ID_ANY, "Defocus 1 (microns, um)")
		self.defoc1Value = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_RIGHT)
		self.defoc2Label = wx.StaticText(self, wx.ID_ANY, "Defocus 2 (microns, um)")
		self.defoc2Value = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_RIGHT)
		self.angleLabel = wx.StaticText(self, wx.ID_ANY, "Angle Astimatism (degrees)")
		self.angleValue = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_RIGHT)
		self.ampConLabel = wx.StaticText(self, wx.ID_ANY, "Amplitude Contrast (0..1)")
		self.ampConValue = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_RIGHT)
		self.processButton = wx.Button(self, wx.ID_ANY, "Process CTF...")
		self.quitButton = wx.Button(self, wx.ID_ANY, "Quit")
		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_BUTTON, self.selectMicrograph, self.openFileButton)
		self.Bind(wx.EVT_BUTTON, self.processCTF, self.processButton)
		self.Bind(wx.EVT_BUTTON, self.quit, self.quitButton)
		# end wxGlade

	def __set_properties(self):
		# begin wxGlade: MyFrame.__set_properties
		self.SetTitle("MyFrame")
		self.processButton.SetBackgroundColour(wx.Colour(255, 198, 191))
		self.processButton.SetFont(wx.Font(16, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Cantarell"))
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: MyFrame.__do_layout
		MainSizer = wx.FlexGridSizer(2, 3, 10, 10)
		Input = wx.FlexGridSizer(11, 2, 5, 15)
		MainSizer.Add(self.Logo, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.static_line_1a, 0, wx.EXPAND, 0)
		Input.Add(self.static_line_1b, 0, wx.EXPAND, 0)
		Input.Add(self.openFileButton, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.imageLabel, 0, wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.static_line_2a, 0, wx.EXPAND, 0)
		Input.Add(self.static_line_2b, 0, wx.EXPAND, 0)
		Input.Add(self.voltLabel, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.voltValue, 0, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.csLabel, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.csValue, 0, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.pixelSizeLabel, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.pixelSizeValue, 0, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.static_line_3a, 0, wx.EXPAND, 0)
		Input.Add(self.static_line_3b, 0, wx.EXPAND, 0)
		Input.Add(self.defoc1Label, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.defoc1Value, 0, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.defoc2Label, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.defoc2Value, 0, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.angleLabel, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.angleValue, 0, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.ampConLabel, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.Add(self.ampConValue, 0, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 0)
		Input.AddGrowableRow(0)
		Input.AddGrowableRow(2)
		Input.AddGrowableRow(6)
		Input.AddGrowableCol(1)
		MainSizer.Add(Input, 1, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
		MainSizer.Add((10, 10), 0, wx.EXPAND | wx.ADJUST_MINSIZE, 0)
		MainSizer.Add(self.quitButton, 0, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 2)
		MainSizer.Add(self.processButton, 0, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 2)
		MainSizer.Add((10, 10), 0, wx.EXPAND | wx.ADJUST_MINSIZE, 0)

		self.statbar = self.CreateStatusBar()
		self.statbar.PushStatusText("Ready", 0)

		self.SetSizer(MainSizer)
		MainSizer.Fit(self)
		MainSizer.AddGrowableRow(0)
		MainSizer.AddGrowableRow(1)
		MainSizer.AddGrowableCol(1)
		self.Layout()
		# end wxGlade

	def selectMicrograph(self, event):  # wxGlade: MyFrame.<event_handler>
		dlg = wx.FileDialog(self, "Choose a micrograph to open", os.getcwd(), "",
			imagetypefilter, wx.OPEN)
		self.data = {}
		if dlg.ShowModal() == wx.ID_OK:
			self.data['outfile'] = dlg.GetFilename()
			self.data['dirname']  = os.path.abspath(dlg.GetDirectory())
			fullpath = os.path.join(self.data['dirname'], self.data['outfile'])
			if not os.path.isfile(fullpath):
				print "ERROR: could not read file %s"%(fullpath)
				self.statbar.PushStatusText("ERROR: could not read file %s"%(fullpath), 0)
			else:
				self.imageLabel.SetLabel(dlg.GetFilename())
				self.statbar.PushStatusText(fullpath, 0)
				self.data['filetypeindex'] = dlg.GetFilterIndex()
			#self.readData()
		dlg.Destroy()
		event.Skip()

	def processCTF(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'processCTF' not implemented!"
		event.Skip()

	def quit(self, event):  # wxGlade: MyFrame.<event_handler>
		wx.Exit()
		event.Skip()


# end of class MyFrame
if __name__ == "__main__":
	app = wx.PySimpleApp(0)
	wx.InitAllImageHandlers()
	MyFrame = MyFrame(None, wx.ID_ANY, "")
	app.SetTopWindow(MyFrame)
	MyFrame.Show()
	app.MainLoop()
